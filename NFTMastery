import hashlib
import time
from typing import List, Dict

class Account:
    def __init__(self, address):
        self.address = address
        self.nfts = []

    def __str__(self):
        return f"Account(Address: {self.address}, NFTs: {self.nfts})"

class NFT:
    def __init__(self, creator, name, metadata):
        self.creator = creator
        self.name = name
        self.metadata = metadata
        self.timestamp = time.time()
        self.id = self.calculate_hash()
        self.owner = creator

    def calculate_hash(self):
        nft_string = f"{self.creator}{self.name}{self.metadata}{self.timestamp}"
        return hashlib.sha256(nft_string.encode()).hexdigest()

    def __str__(self):
        return f"NFT(ID: {self.id}, Name: {self.name}, Metadata: {self.metadata}, Owner: {self.owner})"

class NFTPlatform:
    def __init__(self):
        self.accounts = {}
        self.nfts = {}

    def create_account(self, address):
        if address not in self.accounts:
            self.accounts[address] = Account(address)
            print(f"Account {address} created.")
        else:
            print(f"Account {address} already exists.")

    def mint_nft(self, creator, name, metadata):
        if creator not in self.accounts:
            print(f"Creator account {creator} does not exist.")
            return None

        nft = NFT(creator, name, metadata)
        self.nfts[nft.id] = nft
        self.accounts[creator].nfts.append(nft.id)
        print(f"NFT {nft.id} minted by {creator}.")
        return nft

    def transfer_nft(self, sender, recipient, nft_id):
        if sender not in self.accounts:
            print(f"Sender account {sender} does not exist.")
            return False
        if recipient not in self.accounts:
            print(f"Recipient account {recipient} does not exist.")
            return False
        if nft_id not in self.accounts[sender].nfts:
            print(f"NFT {nft_id} is not owned by {sender}.")
            return False

        self.accounts[sender].nfts.remove(nft_id)
        self.accounts[recipient].nfts.append(nft_id)
        self.nfts[nft_id].owner = recipient
        print(f"NFT {nft_id} transferred from {sender} to {recipient}.")
        return True

    def check_ownership(self, address):
        if address in self.accounts:
            account = self.accounts[address]
            print(account)
        else:
            print(f"Account {address} not found.")

# Example Usage
nft_mastery = NFTPlatform()

# Create accounts
nft_mastery.create_account("alice")
nft_mastery.create_account("bob")

# Mint NFTs
nft1 = nft_mastery.mint_nft("alice", "NFT1", {"description": "First NFT"})
nft2 = nft_mastery.mint_nft("alice", "NFT2", {"description": "Second NFT"})

# Transfer NFTs
nft_mastery.transfer_nft("alice", "bob", nft1.id)

# Check ownership
nft_mastery.check_ownership("alice")
nft_mastery.check_ownership("bob")
